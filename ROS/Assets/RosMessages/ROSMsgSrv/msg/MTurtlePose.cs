//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.ROSMsgSrv
{
    public class MTurtlePose : Message
    {
        public const string RosMessageName = "ROS_msg_srv/TurtlePose";

        public float x;
        public float y;
        public float theta;
        public float linear_velocity;
        public float angular_velocity;

        public MTurtlePose()
        {
            this.x = 0.0f;
            this.y = 0.0f;
            this.theta = 0.0f;
            this.linear_velocity = 0.0f;
            this.angular_velocity = 0.0f;
        }

        public MTurtlePose(float x, float y, float theta, float linear_velocity, float angular_velocity)
        {
            this.x = x;
            this.y = y;
            this.theta = theta;
            this.linear_velocity = linear_velocity;
            this.angular_velocity = angular_velocity;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.Add(BitConverter.GetBytes(this.x));
            listOfSerializations.Add(BitConverter.GetBytes(this.y));
            listOfSerializations.Add(BitConverter.GetBytes(this.theta));
            listOfSerializations.Add(BitConverter.GetBytes(this.linear_velocity));
            listOfSerializations.Add(BitConverter.GetBytes(this.angular_velocity));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            this.x = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.y = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.theta = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.linear_velocity = BitConverter.ToSingle(data, offset);
            offset += 4;
            this.angular_velocity = BitConverter.ToSingle(data, offset);
            offset += 4;

            return offset;
        }

        public override string ToString()
        {
            return "MTurtlePose: " +
            "\nx: " + x.ToString() +
            "\ny: " + y.ToString() +
            "\ntheta: " + theta.ToString() +
            "\nlinear_velocity: " + linear_velocity.ToString() +
            "\nangular_velocity: " + angular_velocity.ToString();
        }
    }
}
